import matplotlib.pyplot as plt
import numpy as np


class GreenFunctionPlotter:
    def __init__(self, title=None):
        self.title = title

    def plot_1d(
        self,
        x_data,
        y_data,
        ylabel,
        xlabel="Distance from Lattice Site",
        label_real="Real Part",
        label_imag="Imaginary Part",
        color_real="green",
        color_imag="red",
        linestyle="-",
        marker=None,
    ):
        """
        Plots 1d data e.g. distance from a lattice site (x-axis) vs.
        a physical quantity (y-axis).
        Handles both real and complex quantities.

        Parameters:
        - x_data (array-like): Data to plot on x-axis e.g. distance from a specific lattice site.
        - y_data (array-like): Y-axis data. Corresponding values of the physical quantity. Can be real or complex.
        - ylabel (str): Label for the y-axis.
        - xlabel (str): Label for the x-axis (default: 'Distance from Lattice Site').
        - label_real (str): Label for the real part of the data series (default: 'Real Part').
        - label_imag (str): Label for the imaginary part of the data series (default: 'Imaginary Part').
        - color_real (str): Line color for the real part (default: 'blue').
        - color_imag (str): Line color for the imaginary part (default: 'green').
        - linestyle (str): Line style (default: '-').
        - marker (str): Marker style (default: None).
        """

        x_data = np.asarray(x_data)
        y_data = np.asarray(y_data)

        plt.figure()

        if np.iscomplexobj(y_data):
            plt.plot(
                x_data,
                y_data.real,
                label=label_real,
                color=color_real,
                linestyle=linestyle,
                marker=marker,
            )
            plt.plot(
                x_data,
                y_data.imag,
                label=label_imag,
                color=color_imag,
                linestyle=linestyle,
                marker=marker,
            )
        else:
            plt.plot(
                x_data,
                y_data,
                label=label_real,
                color=color_real,
                linestyle=linestyle,
                marker=marker,
            )

        plt.xlabel(xlabel)
        plt.ylabel(ylabel)
        if self.title:
            plt.title(self.title)
        plt.legend()
        plt.grid(True)
        plt.show()

    def set_title(self, title):
        """
        Sets the title for the plots generated by this instance.

        Parameters:
        - title (str): Title of the plot.
        """
        self.title = title


# Example Usage
if __name__ == "__main__":
    from tbm_gfs.bulk_green_functions.graphene.single_integral import green_function

    def delta_Gii(lam, energy, m, n, s1, s2):
        gi0 = green_function(energy, m, n, s1, s2)
        g00 = green_function(energy, 0, 0, s1, s2)
        return gi0 * gi0 * lam / (1 - g00 * lam)

    # Example data for spatial plot
    energy = -0.1
    s1 = 1
    s2 = 1
    distances = range(30)
    lam = -1
    delta_gf = [delta_Gii(lam, energy, m, m, s1, s2) for m in distances]

    plotter = GreenFunctionPlotter(
        title=f"Change in GF at energy {energy} \n due to impurity strength {lam} at origin"
    )

    plotter.plot_1d(
        distances,
        delta_gf,
        xlabel="m",
        ylabel="Change in GF",
    )

    plotter.title = "Local density of states"

    # Example data for energy plot
    energies = np.linspace(-4, 4, 200)
    ldos = [
        (-1 / np.pi) * green_function(energy, 0, 0, 1, 1).imag for energy in energies
    ]
    plotter.plot_1d(energies, ldos, xlabel="Energy", ylabel="Local Density of States")
